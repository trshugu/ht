- var soto = "asdf"

doctype html
html
  head
    meta(content="text/html" charset="utf-8")
    title tmp
    
    script(src="https://code.jquery.com/jquery-3.3.1.slim.min.js" integrity="sha256-3edrmyuQ0w65f8gfBsqowzjJe2iM6n0nKciPUp8y+7E=" crossorigin="anonymous")
    //- script(type="text/javascript", src="https://ajax.googleapis.com/ajax/libs/jquery/1.12.4/jquery.min.js")
    //- script(type="text/javascript", src="https://ajax.googleapis.com/ajax/libs/jquery/2.2.4/jquery.min.js")
    script(type="text/javascript", src="tmp.js")
    link(href="tmp.css", rel="stylesheet")
    
    script(src='https://cdn.rawgit.com/jashkenas/coffeescript/571e9df3/docs/v2/browser-compiler/coffeescript.js')
    style(type="text/css")
    
    script(type="text/javascript")
    script(type="text/coffeescript").
      console.log "OK"
      
      
  body
    #tmp(onClick="add()") tmp
    
    script(type="text/javascript" src="https://cdn.jsdelivr.net/npm/vue/dist/vue.js")
    script(type="text/coffeescript").
      
      vm = new Vue
        el: "#rsa"
        data:
          rsapt: ""
          rsae: 65537
          rsap: 601
          rsaq: 607
          pub: ""
          pri: ""
          cry: ""
        methods:
          modular_exp: (a, b, n)->
            self = this
            res = 1
            while b != 0
              if (b & 1) != 0
                res = (res * a) % n
              
              a = (a * a) % n
              b = b >> 1
            
            res
          xeuclid: (aa, bb)->
            self = this
            if bb == 0
              uu = 1
              vv = 0
            else
              qq = Math.floor(aa / bb)
              rr = aa % bb
              res = self.xeuclid(bb, rr)
              uu = res[1]
              vv = res[0] - (qq * res[1])
            return [uu, vv]
          gen_d: (e, l)->
            self = this
            x = self.xeuclid(e, l)[0]
            if x < 0
              return x + l
            else
              return x % l
          gen_rsa: ->
            self = this
            e = self.rsae
            p = self.rsap
            q = self.rsaq
            self.pub = p * q
            self.pri = self.gen_d e, (p-1) * (q-1)
          encrypto: ->
            self = this
            self.cry = self.modular_exp(self.rsapt, self.rsae, self.pub)
          decrypto: ->
            self = this
            self.rsapt = self.modular_exp(self.cry, self.pri, self.pub)
          gen_prime: ->
            self = this
            while true
              ret = self.gen_rand(8)
              if self.mr_primary_test(ret)
                break
            
            return ret
          mr_primary_test: (n, k=100)->
            self = this
            return false if n == 1
            return true if n == 2
            return false if (n % 2) == 0
            
            d = n-1
            s = 0
            while (d % 2) != 0
              d = d/2
              s = s+1
            
            r = [0...k].map -> Math.floor(Math.random() * (n-1)) + 1
            res = r.some (a)->
              if self.modular_exp(a, d, n) != 1
                pl = [0...s].map (rr)-> 
                  (2 ** rr) *d
                
                flg = true
                
                pl.forEach (p)->
                  if self.modular_exp(a, p, n) == 1
                    flg = false
                    return
                
                if flg
                  return true
              
            return res == false
          gen_rand: (bit_length)->
            bits = [0...bit_length - 2].map -> Math.floor(Math.random() * 2)
            ret = 1
            bits.forEach (b)->
              ret = ret * 2 + b
            
            ret * 2 + 1
          gen_prime_button: ->
            self = this
            # self.rsae = self.gen_prime()
            self.rsap = self.gen_prime()
            self.rsaq = self.gen_prime()
    
    #rsa
      //-
        span 素数e
        input#rsae(type="text" v-model="rsae" value="rsae")
        br
      span 素数p
      input#rsap(type="text" v-model="rsap" value="rsap")
      br
      span 素数q
      input#rsaq(type="text" v-model="rsaq" value="rsaq")
      br
      button(v-on:click="gen_rsa") keygen
      button(v-on:click="gen_prime_button") 素数gen
      br
      span 公開鍵
      input#pub(type="text" v-model="pub" value="pub")
      br
      span 秘密鍵
      input#pri(type="text" v-model="pri" value="pri")
      br
      span 平文入力(数字)
      input#rsapt(type="text" v-model="rsapt" value="rsapt")
      br
      span 暗号文
      input#cry(type="text" v-model="cry" value="cry")
      br
      button(v-on:click="encrypto") 暗号化
      br
      button(v-on:click="decrypto") 複合化
    
    
    
    
    
    
    
    
    
    
    
    //-
      /* ニコメスタイル */
      marquee{font-weight: bold;}
      .ni{position: absolute}
      
      #fff{position:fixed; top:10px; left:10px}
    
      #fff
        input(type="text")#ntext
        button#nbutton コメント
      
      canvas#pjs
    
      # ニコメ
      ids = []
      tws = []
      setInterval ->
        console.log "gettw", ids.length
        # fetch "http://.com/gettw/" + "%E3%82%A6%E3%82%B5%E3%82%AE"
        fetch "http://.com/gettw/" + "紅白司会"
        .then (v)->
          # console.log "done", v
          v.json().then (list)->
            list.forEach (i)->
              if (ids.some (j)-> j == i._id)
                # あった
                # console.log "atta"
              else
                # なかった
                # console.log "nakatta"
                ids.push i._id
                tws.push i.value
            
            while tws.length > 0
              console.log tws
              aQueue.push tws.shift()
        .catch (e)-> console.log "e", e
      , 2000
      
      
      # 全体の設定
      b0 = document.getElementsByTagName('body')[0]
      nArea = document.createElement("div")
      mArea = document.createElement("div")
      mArea.className = "ni"
      nArea.appendChild mArea
      b0.parentNode.insertBefore(nArea, b0)
      
      ncom = (com)->
        return if com == ""
        
        mNew = document.createElement("marquee")
        sNew = document.createElement("span")
        sNew.innerText = com
        mNew.appendChild sNew
        
        lane = (nArea.childElementCount-1) * 24
        mArea.parentNode.insertBefore(mNew, mArea)
        
        mNew.loop = "1"
        mNew.scrollDelay = "4000"
        mNew.scrollAmount = b0.offsetWidth + sNew.offsetWidth
        mNew.style = "position:fixed; top:" + lane + "px"
        
        ntext.value = ""
        
        setTimeout ->
          mNew.remove()
        , 4300
      
      
      
      # データがあったら流す
      aQueue = []
      poller = ->
        if aQueue.length != 0
          ncom aQueue.shift()
          
          setTimeout ->
            poller()
          , 100
        else
          setTimeout ->
            poller()
          , 2000
      
      poller()
      
      # aQueueに送る関数
      sender = ()->
        return if ntext.value == ""
        aQueue.push ntext.value
        ntext.value = ""
      
      # viewから
      nbutton.addEventListener  "click", sender
      ntext.addEventListener  "keypress", (e)->
        key = e.which || e.keyCode
        sender() if key == 13

    //-
      # コメントシステムv3
      b0 = document.getElementsByTagName('body')[0]
      nArea = document.createElement("div")
      mArea = document.createElement("div")
      mArea.className = "ni"
      nArea.appendChild mArea
      b0.parentNode.insertBefore(nArea, b0)
      
      ncom = ->
        return if ntext.value == ""
        
        mNew = document.createElement("marquee")
        sNew = document.createElement("span")
        sNew.innerText = ntext.value
        mNew.appendChild sNew
        
        lane = (nArea.childElementCount-1) * 24
        mArea.parentNode.insertBefore(mNew, mArea)
        
        mNew.loop = "1"
        mNew.scrollDelay = "4000"
        mNew.scrollAmount = b0.offsetWidth + sNew.offsetWidth
        console.log mNew.offsetTop
        console.log mNew.clientTop
        console.log mNew.offsetHeight
        console.log mNew.clientHeight
        console.log nArea.childElementCount
        console.log "lane", lane
        mNew.style = "position:fixed; top:" + lane + "px"
        
        ntext.value = ""
        
        setTimeout ->
          mNew.remove()
        , 4300
      
      nbutton.addEventListener  "click", ncom
      ntext.addEventListener  "keypress", (e)->
        key = e.which || e.keyCode
        ncom() if key == 13
    
    
    
    
    
    //-
      script(src='https://cdnjs.cloudflare.com/ajax/libs/p5.js/0.7.2/p5.min.js')
      MAX_LEVEL = 6
      VERT_NUM = 3
      k = 0.5
      alpha = 120
      
      @setup = ->
        console.log "skiteru"
        createCanvas(windowWidth, windowHeight)
        ellipse(100, 100, 80, 50)
        x = width / 2
        y = height / 2
        r = 200
        fractalLoop(r, x, y, 0)
        # console.log beginShape
      
      fractalLoop = (_r, _x, _y, level)->
        return if (level > MAX_LEVEL)
        
        stroke(12 + 30 * level, 30 * level, 12 + 50 * level, alpha);
        
        drawShape(_r, _x, _y);
        
        [0..VERT_NUM].forEach (i)->
          x = _r * cos(TWO_PI / VERT_NUM * (i+0.5)) + _x;
          y = _r * sin(TWO_PI / VERT_NUM * (i+0.5)) + _y;
          
          fractalLoop(_r * k, x, y, level + 1);
        
      
      drawShape= (_r, _x, _y)->
        beginShape()
        [0..VERT_NUM].forEach (i)->
          x = _r * cos(TWO_PI / VERT_NUM * i) + _x
          y = _r * sin(TWO_PI / VERT_NUM * i) + _y
          
          vertex(x, y)
        
        endShape(CLOSE)
      
      
      
      
      
      
    
    
    
    
    
    //-
      new p5 ->
        @setup = ->
          console.log "skiteru"
          createCanvas(windowWidth, windowHeight)
          ellipse(100, 100, 80, 50)
          background("#aaaaff")
          @createSprite(100, 100, 50, 50)

        ###
        @draw = ->
          console.log "dkiteru"
          ellipse(100, 100, 80, 50)
        ###
    
    //- script(src='https://cdnjs.cloudflare.com/ajax/libs/processing.js/1.6.6/processing.min.js')
    //-
      new Processing document.getElementById("pjs"), (processing)->
        processing.setup = ->
          processing.size(400,400)
          # processing.size(innerWidth,innerHeight)
          # processing.stroke(255)
          # processing.frameRate(30)
        
        a = 0
        
        processing.draw = ->
          processing.fill("#021050", 5);
          processing.rect(0, 0, processing.width, processing.height);
          processing.translate(200+a*10, 200+a*10);
          processing.rotate(a);
          processing.scale(a/15);
          a += 0.05;
          processing.kao(0, -50);
          processing.kao(1, 50);
          if (a>30)
            a -= 50;
        
        processing.kao = (don, b)->
          processing.stroke(0);
          processing.strokeWeight(2);
          processing.fill("#e7eedd");
          processing.ellipse(b, 0, 50, 50);
          processing.noStroke();
          processing.fill("#68c0c0" + "#8f8768" * don);
          processing.ellipse(b, 0, 38, 38);
          
          processing.stroke(0);
          processing.strokeWeight(1.4);
          processing.arc(b + 4.26, 5, 8.5, 7.3, 0.3, processing.PI, processing.OPEN);
          processing.arc(b - 4.26, 5, 8.5, 7.3, 0.3, processing.PI - 0.3, processing.OPEN);
          processing.fill(0);
          processing.ellipse(b - 11, -2, 6.56, 7);
          processing.ellipse(b + 11, -2, 6.56, 7);
      
    
    
    //- processing.js
      script(type="application/processing" data-processing-target="pjs").
        void setup(){
          size(400,400);
        }
        
        float a = 0;
        
        void draw(){
          fill(#021050, 5);
          rect(0, 0, width, height);
          translate(200+a*10, 200+a*10);
          rotate(a);
          scale(a/15);
          a += 0.05;
          kao(0, -50);
          kao(1, 50);
          if (a>30) a -= 50;
        }
        
        // 魔法の筆 呪文で絵描くよ 君も描こう！
        void kao(int don, float b){
          stroke(0);
          strokeWeight(2);
          fill(#e7eedd);
          ellipse(b, 0, 50, 50);
          noStroke();
          fill(#68c0c0 + #8f8768 * don);
          ellipse(b, 0, 38, 38);
          
          stroke(0);
          strokeWeight(1.4);
          arc(b + 4.26, 5, 8.5, 7.3, 0.3, PI, OPEN);
          arc(b - 4.26, 5, 8.5, 7.3, 0.3, PI - 0.3, OPEN);
          fill(0);
          ellipse(b - 11, -2, 6.56, 7);
          ellipse(b + 11, -2, 6.56, 7);
        }
    
    
    //-
      # コメントシステムv2
      b0 = document.getElementsByTagName('body')[0]
      nArea = document.createElement("div")
      nArea.className = "ni"
      b0.parentNode.insertBefore(nArea, b0)
      
      ncom = ->
        return if ntext.value == ""
        
        mNew = document.createElement("marquee")
        sNew = document.createElement("span")
        sNew.innerText = ntext.value
        mNew.appendChild sNew
        
        nArea.parentNode.insertBefore(mNew, nArea)
        
        mNew.loop = "1"
        mNew.scrollDelay = "4000"
        mNew.scrollAmount = b0.offsetWidth + sNew.offsetWidth
        
        ntext.value = ""
        
        setTimeout ->
          mNew.remove()
        , 4300
    
      nbutton.addEventListener  "click", ncom
      ntext.addEventListener  "keypress", (e)->
        key = e.which || e.keyCode
        ncom() if key == 13
    
    //-
      # コメントシステムv1
      b0 = document.getElementsByTagName('body')[0]
      nArea = document.createElement("div")
      nArea.className = "ni"
      b0.parentNode.insertBefore(nArea, b0)
      
      ncom = ->
        console.log "kiteru"
        return if ntext.value == ""
        
        mNew = document.createElement("marquee")
        mNew.innerText = ntext.value
        mNew.className = "nicom"
        
        mNew.loop = "1"
        mNew.scrollDelay = "85"
        mNew.scrollAmount = "20"
        
        # b0.parentNode.insertBefore(nArea, b0)
        nArea.parentNode.insertBefore(mNew, nArea)
        
        # b0.parentNode.insertBefore(mNew, b0)
        
        ntext.value = ""
        
        setTimeout ->
          mNew.remove()
        , 4000
    
    
    //-
      script(type="text/javascript" src="https://cdn.jsdelivr.net/npm/vue/dist/vue.js")
      script(type="text/coffeescript").
        Vue.component "cpm",
          render: (ce)->
            console.log "kiteruyo--", ce
            ce "h1", {}, [ce("h2", "hell")]
        
        vm = new Vue
          el: "#app"
          data:
            hello: 'hello'
      
      #app
        p
          | {{ hello }}
          cpm
    
    
    
    
    
    //-
      script(type="text/javascript" src="https://cdn.jsdelivr.net/npm/vue/dist/vue.js")
      script(type="text/coffeescript").
        Vue.component "comp",
          template: tmp
        
        new Vue
          el: '#ccc'
          components:
            "cmp":
              template:"#comp"
      
      
      script#comp(type="text/x-template")
        #comp
          div コンポーネントです
      
      #ccc
        cmp
    
    
    
    
    //-
      style(type="text/css").
        .tab-button {
          padding: 6px 10px;
          border-top-left-radius: 3px;
          border-top-right-radius: 3px;
          border: 1px solid #ccc;
          cursor: pointer;
          background: #f0f0f0;
          margin-bottom: -1px;
          margin-right: -1px;
        }
        .tab-button:hover { background: #e0e0e0;}
        .tab-button.active { background: #e0e0e0;}
        .tab {border: 1px solid #ccc; padding: 10px;}
      
      
      script(type="text/javascript" src="https://cdn.jsdelivr.net/npm/vue/dist/vue.js")
      script(type="text/coffeescript").
        Vue.component 'tab-one',  template: '<div>ひとつめ</div>' 
        Vue.component 'tab-two',  template: '<div>ふたつめ</div>' 
        Vue.component 'tab-three', template: '<div>三つ目</div>' 
        Vue.component 'tab-hidoki', (f,r)->
          setTimeout ->
            f template: '<div>非同期で取得</div>' 
          , 1000
        
        new Vue
          el: '#dy',
          data:
            currentTab: 'one',
            tabs: ['one', 'two', 'three', "hidoki"]
          computed:
            currentTabComponent: ->
              'tab-' + @currentTab.toLowerCase()
      
      #dy.demo
        button(v-for="tab in tabs" :key="tab" :class="['tab-button', { active: currentTab === tab }]" v-on:click="currentTab = tab") {{tab}}
        component.tab(:is="currentTabComponent")
    
    
    //-
      script(type="text/javascript" src="https://cdn.jsdelivr.net/npm/vue/dist/vue.js")
      script(type="text/javascript" src="https://cdn.rawgit.com/Caligatio/jsSHA/766f8ff7/src/sha256.js")
      script(type="text/coffeescript").
        Vue.component "other", (f,r)->
          fetch "https://s3.ap-south-1.amazonaws.com/test-suzuki/dropbox/gaibu.json"
          .then (f)->
            f.text()
          .then (v)->
            return
              template: "#gaibu"
              data: ->
                arr: JSON.parse v
          .catch (e)->
            console.log "e",e
        
        ctemp = (f,r)->
          fetch "https://s3.ap-south-1.amazonaws.com/test-suzuki/dropbox/gaibu.json"
          .then (f)->
            f.text()
          .then (v)->
            return
              template: "#gaibu"
              data: ->
                arr: JSON.parse v
          .catch (e)->
            console.log "e",e
        
        vm = new Vue
          el: '#app'
          components:
            "gai": ctemp
      
      script#gaibu(type="text/x-template")
        table(style="border:4px")
          tr
            th key
            th value
          tr(v-for="item in arr")
            td {{item.id}}
            td {{item.value}}
      
      #app
        gai
        other
    
    
    //-
      script(type="text/javascript" src="https://cdn.jsdelivr.net/npm/vue/dist/vue.js")
      script(type="text/javascript" src="https://cdn.rawgit.com/Caligatio/jsSHA/766f8ff7/src/sha256.js")
      script(type="text/coffeescript").
        new Vue
          el: '#app'
          data:
            inhash: ""
            hash: ""
          watch:
            "inhash": (n,o)->
              console.log n
              shaObj = new jsSHA "SHA-256", "TEXT"
              shaObj.update n
              @hash = shaObj.getHash "HEX"
      
      
      #app
        input(v-model="inhash")
        p {{hash}}
      
    
    
    
    //-
      script(type="text/javascript" src="https://cdn.jsdelivr.net/npm/vue/dist/vue.js")
      script(type="text/javascript" src="https://cdn.rawgit.com/Caligatio/jsSHA/766f8ff7/src/sha256.js")
      script(type="text/coffeescript").
        shaObj = new jsSHA "SHA-256", "TEXT"
        shaObj.update "This is a "
        shaObj.update "test"
        hash = shaObj.getHash "HEX"
        
        ctemp = (f,r)->
          fetch "https://s3.ap-south-1.amazonaws.com/test-suzuki/dropbox/divpart.html"
          .then (f)->
            f.text()
          .then (v)->
            template: v
            data: ->
              proPro: "==SHA-256:" + hash
            # props:["proPro"]
          .catch (e)->
            console.log "e",e
        
        new Vue
          el: '#app'
          components:
            "temp": ctemp
      
      #app
        temp(pro-pro="nakami")
    
    //-
      script(type="text/javascript" src="https://cdn.jsdelivr.net/npm/vue/dist/vue.js")
      script(type="text/coffeescript").
        aaaa="""
          <div>aaaa component{{proPro}}</div>
        """
        
        opt =
          template: aaaa
          props:["proPro"]
          method:
            void: -> console.log "vooii"
        
        Vue.component 'temp', (f,r)->
          fetch "https://s3.ap-south-1.amazonaws.com/test-suzuki/dropbox/divpart.html"
          .then (f)->
            f.text().then (v)->
              console.log v
              template: v
              props:["proPro"]
          .catch (e)->
            console.log "e",e
        
        new Vue
          el: '#app'
          loaders:
            html: 'pug'
          components:
            "com": opt
      
      script#bbbb(type="text/x-template")
        .aaa pug component
      
      #app
        temp(pro-pro="ppap")
        com(pro-pro="pppap")
    
    
    //-
      style(type="text/css").
        .fade-enter-active, .fade-leave-active {
          transition: opacity .5s;
        }
        .fade-enter, .fade-leave-to /* .fade-leave-active below version 2.1.8 */ {
          opacity: 0;
        }
        
        
        .no-mode-translate-demo-wrapper {
          position: relative;
          height: 18px;
        }
        .no-mode-translate-demo-wrapper button {
          position: absolute;
        }
        .no-mode-translate-demo-wrapper span {
          position: absolute;
        }
        .no-mode-translate-demo-wrapper div {
          position: absolute;
        }
        .no-mode-translate-fade-enter-active, .no-mode-translate-fade-leave-active {
          transition: all 1s;
        }
        .no-mode-translate-fade-enter, .no-mode-translate-fade-leave-active {
          opacity: 0.5;
        }
        .no-mode-translate-fade-enter {
          transform: translateX(31px);
        }
        .no-mode-translate-fade-leave-active {
          transform: translateX(-31px);
        }
      
      
      
      script(type="text/javascript" src="https://cdn.jsdelivr.net/npm/vue/dist/vue.js")
      script(type="text/coffeescript").
        
        Vue.component 'one',
          template: "<div>ichi</div>"
        Vue.component 'two',
          template: "<div>nii</div>"
        Vue.component 'thr',
          template: "<div>san</div>"
        
        new Vue
          el: '#app'
          data:
           show: true
           on: false
           view: "one"
           namae: "one"
        
      
      #app
        .a ==========
        .a {{one}}
        one
        .a {{namae}}
        .a {{namae}}
        span(v-html="namae")
        .a ==========
        
        button(v-on:click="show = !show") Toggle
        transition(name="fade")
          p(v-if="show")
            | hell
            one
        
        button(v-if="on" key="on" @click="on = false") on
        button(v-else="" key="off" @click="on = true") off
        
        .no-mode-translate-demo-wrapper
          transition(name="no-mode-translate-fade")
            one(v-if="on" key="on") on
            two(v-else="" key="off") off
        
        
        input#a(v-model="view" type="radio" value="two" name="view")
        label(for="a") A
        
        input#b(v-model="view" type="radio" value="thr" name="view")
        label(for="b") B
        
        .no-mode-translate-demo-wrapper
          transition(name="no-mode-translate-fade" mode="out-in")
            component(v-bind:is="view")
        
        .aaa aaadesu
        .aaa(v-bind:is="view")
        
        
    
    
    
    //-
      style(type="text/css").
        .tab-button {
          padding: 6px 10px;
          border-top-left-radius: 3px;
          border-top-right-radius: 3px;
          border: 1px solid #ccc;
          cursor: pointer;
          background: #f0f0f0;
          margin-bottom: -1px;
          margin-right: -1px;
        }
        .tab-button:hover {
          background: #e0e0e0;
        }
        .tab-button.active {
          background: #e0e0e0;
        }
        .tab {
          border: 1px solid #ccc;
          padding: 10px;
        }
      
      
      script(type="text/javascript" src="https://cdn.jsdelivr.net/npm/vue/dist/vue.js")
      script(type="text/coffeescript").
        Vue.component 'tab-home', 
          template: '<div>Home component</div>' 
        
        Vue.component 'tab-posts', 
          template: "#tab-posts" 
          data: ->
            posts: [
              id:1
              tit:"aaa"
              nai:"absvbd"
            ,
              id:2
              tit:"bbb"
              nai:"yousyosoys"
            ]
            selectedPost: null
        
        Vue.component 'tab-archive',
          template: '<div>Archive component</div>' 
        
        Vue.component 'tab-hidoki', (f,r)->
          setTimeout ->
            f template: '<div>hodoki component</div>' 
          , 1000
        
        
        
        Vue.component "pos",
          template: "#pos"
        
        new Vue
          el: '#dynamic-component-demo',
          data:
            currentTab: 'Home',
            tabs: ['Home', 'Posts', 'Archive', "hidoki"]
          computed:
            currentTabComponent: ->
              'tab-' + @currentTab.toLowerCase()
      
      script#load(type="text/x-template")
        #load loooooo
      
      script#tab-posts(type="text/x-template")
        #tab-posts
          ul.sidebar
            li(v-for="item in posts" :key="item.id" v-on:click="selectedPost = item") {{item.tit}}
          .container
            .item(v-if="selectedPost")
              h4 {{selectedPost.tit}} {{selectedPost.nai}}
            strong(v-else) CLICK
      
      script#pos(type="text/x-template")
        #pos
          .aa a {{id}} {{tit}}
      
      
      
      
      #dynamic-component-demo.demo
        button(v-for="tab in tabs" :key="tab" :class="['tab-button', { active: currentTab === tab }]" v-on:click="currentTab = tab") {{tab}}
        
        keep-alive
          component.tab(:is="currentTabComponent")
    
    
    
    //-
      script(type="text/javascript" src="https://cdn.jsdelivr.net/npm/vue/dist/vue.js")
      script(type="text/coffeescript").
        Vue.component "comp",
          template: "#hell"

        Vue.component "gai",
          template: "#gai"
          props: [
            "kotei"
            # "val"
            # "id"
            "item"
            "fs"
          ]
          data: ->
            count: 0
            ind: 10
        
        vm = new Vue
          el: '#app'
          data:
            master: "atai"
            fs: 1
            arr:[
                id:1,val:"idhi"
              ,
                id:2,val:"niii"
              ,
                id:3,val:"zannn"
            ]
        
        setTimeout ->
          vm.arr.push id:99, val: "void"
          # vm.fs += 1
        , 1000
        
      
      script#gai(type="text/x-template")
        #gai
          p#naniya Hello hello hello {{count}}
          a(href="sdf") gaigai {{ind}}
          button(v-on:click="count++") osu
          button(v-on:click="ind--") osu
          button(v-on:click="$emit('enlarge')") fs
          .ff(:style="{fontSize: fs + 'em'}") fsffs
          .kote koko {{kotei}} desu
          .item itemm {{item.id}}:{{item.val}}
          .slo slottto
          slot
      
      script#hell(type="text/x-template")
        #hell
          p#naniya Hell hell hell
          br
          a(href="jigoku") jigoku
          //- gai
      
      
      #app
        comp
        gai(v-for="item in arr" :key="item.id" :item="item" :fs="fs" v-on:enlarge="fs += 0.1")
          .slot fkinggay
        .sep ◆◆◆◆◆◆◆◆seeeeeeeeeeeeeeep
        //- gai(v-for="item in arr" :key="item.id" :id="item.id" :val="item.val")
        .sep ◆◆◆◆◆◆◆◆seeeeeeeeeeeeeeep
        //- 
          gai(kotei="koteee")
          gai(kotei="teitouwa")
          gai
    
    
    //-
      //- script(type="text/coffeescript" src="https://s3.ap-south-1.amazonaws.com/test-suzuki/presen/test.coffee")
      script(type="text/javascript" src="https://cdn.jsdelivr.net/npm/vue/dist/vue.js")
      
      script(type="text/coffeescript").
        tmp = '''
          <p>test</p>
        '''
        
        Vue.component "comp",
          template: tmp
          # template: "#hell"
          # template: "#tem"
        
        new Vue
          el: '#app'
      
      
      //- template#tem(src="./tmp.vue")
      
      
      script#hell(type="text/x-template")
        #hell
          p#naniya Hello hello hello
          br
          a(href="sdf") korehadoud
          
      
      
      #app: comp



    //-
      script(type="text/javascript" src="https://cdn.jsdelivr.net/npm/vue/dist/vue.js")
      script(type="text/coffeescript").
        new Vue
          el: '#app'
          data:
            label: "メッセージ"

        
      #app
        input(v-model="label")
        p {{label}}

    
    
    //-
      script(type="text/coffeescript").
        getCellSize = ->
          cW = 0
          cH = 0
          s = 0
          
          
          if document.getElementById("cell")
            cW = document.getElementById("cell").clientWidth
            cH = document.getElementById("cell").clientHeight
          
          s = "横幅 = " + cW + " / 高さ = " + cH
          document.getElementById("CellSize").innerHTML = s
        
        document.getElementById("cell").addEventListener "change", -> getCellSize()
        document.getElementById("cell").addEventListener "input", -> getCellSize()
        document.getElementById("cell").addEventListener "resize ", -> getCellSize()
        
        window.onresize = ->
          getCellSize()
        
        
        getCellSize()
      
      
      #cell
        textarea cellチェック
      
      #CellSize
      
    
    
    //-
      script(type="text/javascript" src="https://cdn.jsdelivr.net/npm/vue/dist/vue.js")
      script(type="text/coffeescript").
        console.log "log"
        tmp = '''
          <div :class="divClass">
            <button :class="btnClass" :disabled="disabled" @click="add()">
              <i :class="iClass" aria-hidden="true"></i>{{label}}
            </button>
            <ul class="autocomplete">
              <li v-for="row in result" :key="row" @click="remove(row)">{{row}}</li>
            </ul>
          </div>
        '''
        
        Vue.component "input_autocomplete",
          template: tmp
          props:
            label: { type: String },
            divClass: { type: String, default: 'width100'},
            btnClass: { type: String, default: 'btn-normal green' },
            iClass: { type: String, default: '' },
          data: ->
            console.log @label
            if (true==true)
              return
                result: [1,2]
                rabel: @label
            else
              return result: [1,2]
          template: tmp
          methods:
            add: ->
              console.log "death"
              console.log @mess
              console.log this.mess
              console.log @vvv
              console.log @rabel
              # console.log mess
              @result.push new Date().getTime()
              # this.$set(this.arr, 4, 98)
            remove: (item_id)->
              index = null
              $.each @result, (i, obj)->
                if (obj.id == item_id)
                  return index = i
              
              return @result.splice(index, 1)

          computed: 
            disabled: ->
              @result.length >= 10
          


        new Vue
          el: '#app'
          data:
            label: "メッセージ"
        
        
      #app
        input_autocomplete(:label="label")


    
    //-
      script(type="text/coffeescript").
        tmp = '''
          <div>
            <button v-on:click="count++">
              You clicked me {{ count }} times.
            </button>
            <div v-for="(v,k,i) in result">
              {{v}}
              {{k}}
              {{i}}
              <br>
            </div>
            <button v-on:click="add">aaa</button>
          </div>
        '''

        Vue.component "input_autocomplete",
          props:
            mess: String
            vvv: String
          data: ->
            count: 0
            result: [1,2,4,5,3,@mess]
          template: tmp
          methods:
            add: ->
              console.log "death"
              console.log @mess
              console.log this.mess
              console.log @vvv
              # console.log mess
              @result.push 99
              # this.$set(this.arr, 4, 98)
        
        
        
        new Vue
          el: '#app'
          data: ->
            myMes: "メッセージ"
            vvv: "セージ"
            mmm: ["メッセ"]
        
        
        Vue.component 'child-component',
          props: 
            aaa: String
          template: '<span>{{aaa}}</span>'
        
        new Vue
          el: '#appri',
          data: ->
            myMessage: '親が持つメッセージデータ',
        
    
    
    
    //-
      #appri
        child-component(:aaa="myMessage")
      
      #app
        input_autocomplete(:mess="myMes" v-bind:em="mmm" :vvv="vvv")
    
    
    
    
    //-
      script(type="text/javascript" src="https://cdn.jsdelivr.net/npm/vue/dist/vue.js")
      script(src="https://unpkg.com/vue-router/dist/vue-router.js")
      script(type="text/coffeescript").
        app = new Vue
          el: "#app"
          data:
            vv: 1
          router: new VueRouter
            routes: [
              path: "/user/:id", component:
                template: "<div>User {{ $route.params.id }}<br><router-link to='/muser/9'>Muser</router-link></div>"
            ,
              path: "/muser/:id", component:
                template: "<div>Muser {{ $route.params.id }}</div>"
            ]
        console.log app.vv
      
      
      .cc a {{vv}} b
      #app
        router-view
        router-link(to="/user/1") link
    
    
    
    
    
    //-
      script(type="text/javascript" src="http://knockoutjs.com/downloads/knockout-3.4.2.js")
      script(type="text/coffeescript").
        VM = ->
          @text = ko.observable("")
          @val = ko.computed(->
            return @text()
          , this)
          return
        
        ko.applyBindings new VM()
      
      input(data-bind="value: text, valueUpdate: 'afterkeydown'")
      div(data-bind="text: val")

    //-
      script(type="text/coffeescript").
        console.log "OK2"
        # Modelを定義
        M = (value) ->
          self = this
          self.text = ko.observable(value)
          return
        
        # ViewModelを定義
        VM = ->
          self = this
          self.list = ko.observableArray() # todoリスト
          self.inputValue = ko.observable("") # 追加todoテキスト
          
          # 追加
          self.add = (obj, e) ->
            return  unless self.inputValue() # 空文字の場合は処理しない
            
            # 入力されたテキストでModelを作りリストに挿入
            self.list.unshift new M(self.inputValue())
            self.inputValue ""
            return
          
          # 削除
          self.remove = (obj, e) ->
            # イベントバインディングで実行される関数の第1引数にはModel、第2引数にはイベントオブジェクトが渡される
            self.list.remove obj
            return
          
          return
        
        # bindingスタート
        ko.applyBindings new VM()
      
      
      input(type="text" value="" data-bind="value: inputValue")
      button(data-bind="click: add") add
      
      .list(data-bind="foreach: list, visible: list().length > 0")
        .sep
          span(data-bind="text: text") Todo
          button(data-bind="click: $root.remove") delete
    
    
    
    
    //-
      link(rel="stylesheet" href="http://cdnjs.cloudflare.com/ajax/libs/highlight.js/9.12.0/styles/default.min.css")
      script(src="http://cdnjs.cloudflare.com/ajax/libs/highlight.js/9.12.0/highlight.min.js")
      script(type="text/coffeescript").
        # $('pre code').each (i, block) -> hljs.highlightBlock(block)
        hljs.initHighlightingOnLoad()
      
      pre
        code
          | console.log "dasdf"
          | asdf = (noi)-> true
    
    
    
    
    
    
    //-
      script(src="https://cdn.rawgit.com/christianbach/tablesorter/07e09182/jquery.tablesorter.min.js")
      script(type="text/coffeescript").
        $("#ts").tablesorter()
      
      
      table#ts.tablesorter
        thead 
          tr
            th れついち
            th れつに
            th れつさん
            th れつよん
        tbody
          tr
            td aaa
            td iii
            td uu
            td ee
          tr
            td aaa1
            td iiii
            td 010
            td 011
          tr
            td 200
            td 201
            td 10
            td 1
          tr
            td 0200
            td x0200
            td 10
            td 11
    
    
    
    
    
    
    //-
      script(src="https://cdn.jsdelivr.net/npm/vue/dist/vue.js")
      script(src="https://unpkg.com/vue-router/dist/vue-router.js")
      
      #app
        router-view
        router-link(to="/user/1") link
      
      script(type="text/coffeescript").
        app = new Vue
          el: "#app"
          router: new VueRouter
            routes: [
              path: "/user/:id", component:
                template: "<div>User {{ $route.params.id }}</div>"
            ]
    
    
    
    
    
    //-
      #app {{ message }}
      
      script(type="text/coffeescript").
        app = new Vue
          el: '#app'
          data:
            message: 'Hello Vue!'
    
    
    
    
    //-
      .t がぞう
      .image-on
        | text
        //- img(src="https://www.google.co.jp/images/branding/googlelogo/2x/googlelogo_color_272x92dp.png")
      br
      .t 入れ替えるまえ
      .image-off
        | nothing
      br
      .t 画像を入れ替えろ
      .change
        .image-off
      
      button(onclick="chimg(event)") chimg
    
    
    
    
    
    
    
    
    
    
    //-
      | win :
      #WinSize
      br
      | scr :
      #ScrSize
      br
      | checker :
      
      
      br
      | bb
      br
      | bb
      br
      | bb
      #checker
      br
    
    
    
    //-
      form(method="post" action="#")
        | 年
        input(type="text" name="y" maxlength="4" size="8" onchange="zeller(event, this.form)")
        | 月
        input(type="text" name="m" maxlength="2" size="4" onchange="zeller(event, this.form)")
        | 日
        input(type="text" name="d" maxlength="2" size="4" onchange="zeller(event, this.form)")
      #dow
    
      convert_dow = (i)->
        switch i
          when 0 then return "日"
          when 1 then return "月"
          when 2 then return "火"
          when 3 then return "水"
          when 4 then return "木"
          when 5 then return "金"
          when 6 then return "土"
      
      @zeller = (ev, self)->
        if self.y.value != "" && self.m.value && self.d.value
          y = parseInt self.y.value
          m = parseInt self.m.value
          d = parseInt self.d.value
          
          if m == 1 || m == 2 
            m = 13 if m == 1
            m = 14 if m == 2
            y = y - 1
          
          dow = (y + Math.floor(y / 4) - Math.floor(y / 100) +  Math.floor(y / 400) + Math.floor((m * 13 + 8) / 5) + d) % 7
          
          document.getElementById("dow").innerText = "あなたの誕生日は" + convert_dow(dow) + "曜日でした"
        
        ev.preventDefault()

    
    //-
      .dotted dotted
      br
      .dashed dashed
      br
      .outset outset
      br
      .inset inset
      br
      .ridge ridge
      br
      .groove groove
      br
      .double double
      br
      .solid solid
      br
      
    
    
    //-
      .wrap.right cc
        .red a
        .blue b
    
    
    //-
      | ==
      input(type="file" onchange="echeck(event)")
      br
    
    
    
    //-
      | ==
      input(type="file" onchange="changeblob(event)")
      br
      | =readAsDataURL=
      input(type="file" onchange="readAsDataURL(event)")
      br
      | =readAsArrayBuffer=
      input(type="file" onchange="readAsArrayBuffer(event)")
      br
      | =readAsText=
      input(type="file" onchange="readAsText(event)")
      br
      | =createObjectURL=
      input(type="file" onchange="createObjectURL(event)")
    
    
    
    
    //-
      .arrow.reco
    
    
    
    
    //-
      ###
      @add = ->
        console.log $("#fff")[0].files.item(0).name if $("#fff")[0]?.files?.item(0)?
        console.log $("#fff")[0].files[0].name if $("#fff")[0]?.files[0]?
      
      
      r = new FileReader()
      r.onload = (e)->
        # $("#res").text(r.result)
        $("#res").attr("src", r.result)
        console.log "end"
      
      # arr = new Uint8Array(buffer)
      
      @ccc = (event)->
        f = event.target.files[0]
        console.log f.name
        console.log f.size
        console.log f.type
        
        # r.readAsText f,"shift_jis"
        # r.readAsDataURL f
        $("#res").attr("src", URL.createObjectURL(f))
      ###
    
    //- script(src="https://code.jquery.com/jquery-2.2.4.min.js" integrity="sha256-BbhdlvQf/xTY9gja0Dq3HiwQF8LaCRTXxZKRutelT44=" crossorigin="anonymous")
    //- script(type="text/javascript", src="bower_components/jquery/dist/jquery.min.js")
    //- script(type="text/javascript", src="bower_components/coffee-script/extras/coffee-script.js")
    // script(type="text/javascript", src="coffeescript.js")
    //- script(type="text/javascript", src="bower_components/rxjs/dist/rx.all.min.js")
    //- script(type="text/javascript", src="bower_components/rxjs/dist/rx.time.min.js")
    
    //- script(type="text/javascript", src="./p5.min.js")
    //- script(type="text/javascript", src="./html2canvas.js")
    
    //-
      input#fff(type="file" onchange="ccc(event)")
      img#res
      textarea#res
    
    
    //-
      .nanigasi(data-foe="nonioi")
      script.
        console.log(document.getElementsByClassName("nanigasi")[0].dataset.foe);
    
    
    //-
      script.
        doSubmit = -> grecaptcha.execute()
        onSubmit = -> form.submit()
      
      script(src="https://www.google.com/recaptcha/api.js?hl=ja" async defer)
      
      form(method="POST" action="/")
        .g-recaptcha(
           data-sitekey="aaa"
           data-callback="onSubmit"
           data-size="invisible")
       
        .regbtn_area.btn01_off
          a(href="javascript:void(0);" onclick="doSubmit()") 設定
    
    
    
    
    //-
      - var bai = "aa"
      
      .hensu #{bai}
      
      a#ss(attr="#{bai}") namihei
      .a ぼくのちょっか
      h1 へろあｃけびちょっか
      
      #area
        .aaa あああれあ
        h1 へろあｃけびあれあ
        .iii いいいいあれあ
      
      #arearea
        .a ぼくasdfのれれれ
        h1 へろあfｃけびれれれ
        .iii いいdfdいいれれれｒ
      
    
    
    
    
    
    
    //-
      #paper
        .aaa あああ
        .iii いいいい
      
      #dllink
    
    //-
      script(type="riot/tag" template='jade')
        todo
          h3 TODO
          ul
            li
              each= { item, i in items } { item }
          form(onsubmit={ handleSubmit })
            input
          
          script(type='text/coffee').
            this.items = []
            handleSubmit= (e) ->
              input = e.target[0]
              this.items.push(input.value)
              input.value = ''
            
      
      todo
      
      
      script.
        riot.mount('todo')
    
    //-
      app(title="hell")
      
      
      
      script(type="riot/tag" template='jade')
        app
          h3{ opts.title }
      
      
      script.
        riot.mount("*")
    
    //- ウィンドウサイズのリアルタイムな取得2
      p 画面サイズ：
        span#ScrSize
      p ウィンドウサイズ：
        span#WinSize
    
    
    
    
    //-
      #loc
        a(href="#") aa
    
    
    //-
      .loc
        | asdf
      .loc
        - var u = "asdf/f/f<d>e"
        | #{u}
      .loc
        | #{"sdf"[1]}
      .loc
        | this
        - var c = "asdfasdf"
      
    
    //-
      .1jk3jkl
        2kljfjkfelk
      
      3jo3
      
      .aaa
         ああああ
      
       ああああ
      
      textarea(name="aaa")
        | lkasjdf
    
    
    
    //-
      - var a = "asdf,fe,feef"
      
      each i in a.split(',')
        br
        | #{i}
    
    //-
      #aja
    
    //-
      .container
        h1(contenteditable="true") TEXT
        p.text: input(type="text" placeholder="Text" value="TEXT")
        p.size: input(type="number" placeholder="Size" step="10" value="40")
        p.color: input(title="color" type="color" placeholder="Color" value="#ffffff")
        p#combined
    
    
    //-
      .container
        #box
          span Drag Me
    
    //-
      .header
        button#btn.left Try
        .right
          p: svg(height="12" width="12")
            circle(cx="6" cy="6" r="6" fill="#69c2d8")> click
          p: svg(height="12" width="12")
            circle(cx="6" cy="6" r="6" fill="#ed145b") alt+click
      .marbles
        .timeline: .progressbar
        .filter filter()
        .timeline,progressbar
      script(src="//code.jquery.com/jquery-2.1.1.min.js")
      script(src="//cdnjs.cloudflare.com/ajax/libs/gsap/1.11.7/TweenMax.min.js")
    
    
    //-
      button#btn click
    
    
    
    
    
    //-
      script(type="text/javascript", src="bower_components/coffee-script/extras/coffee-script.js")
      script(type="text/javascript", src="bower_components/jquery/dist/jquery.min.js")
      script(type="text/javascript", src="bower_components/vue/dist/vue.min.js")
      
      script(type="text/javascript", src="bower_components/bacon/dist/Bacon.min.js")
      script(type="text/javascript", src="bower_components/rxjs/dist/rx.all.min.js")
      script(type="text/javascript", src="bower_components/three.js/build/three.min.js")
    
    //-
      script(type="text/javascript", src="bower_components/jointjs/dist/joint.all.min.js")
      script(type="text/javascript", src="bower_components/jointjs/dist/joint.shapes.uml.min.js")
    
    //-
      script(type="text/javascript", src="bower_components/flotr2/flotr2.min.js")
    
    //-
      link(href="bower_components/jointjs/dist/joint.all.min.css", rel="stylesheet")
    
    
    //-
      link(rel="stylesheet" href="http://cdnjs.cloudflare.com/ajax/libs/highlight.js/8.2/styles/default.min.css")
      script(src="http://cdnjs.cloudflare.com/ajax/libs/highlight.js/8.2/highlight.min.js")
      script.
        hljs.initHighlightingOnLoad();
    
    
    
    //- タグテンプレート NG 展開されない
      mixin link
        .lin
          a.menu(attributes)
            block
      
      +link.kurazz(href="#") sya-pu
      +link#aide(href="b") a
      +link(href="a") b
    
    
    
    //-
      mixin atori
        .tori(class=attributes.class)
          block
      
      +atori.bold
        .naka nakami
      
      +atori.red
        .naka rednakami
    
    
    //-
      mixin mifunc(val)
        if val == "vvaall"
          .ifif ihubun
          block
        else
          .elel erusu
          block
      
      
      +mifunc("vvaall")
        p buronakami
      
      +mifunc("tigaumono")
        p buronakami
    
    //-
      button#btn cli
    
    //-
      | jade mix-in (blockが必要であった)
      .a aaa
      mixin wrap(bool)
        if bool
          span(style="color:#121")
            block
        else
          span(style="color:#897")
            block
      .b bbb
      p
        +wrap(true): | qqqq
          | mmmm
        | dfkj
      .c ccc
    
    //-
      #slides
        section.visible 1
        section 2
        section 3
        section 4
        section 5
      
      p#control
        button#prev ←prev
        button#next next→
    
    
    //-
      #loadfile
    
    //-
      #paper
    
    //-
      pre
        code.
          console.log "noi"
          -> alert()

      pre
        code.
          console.log("noi");
          function() {alert();}
    
    //- flotr2でkkbdb
      #add(onclick="add()") add
      #add2(onclick="add2()") add2
      #graph
    
    
    //- vue event
      #app
        input(type="text" v-model="t")
        div {{t}}
        div(v-on="click: fun") aaa
    
    //- vue list select
      #app
        input(type="text" v-model="s")
        div(v-repeat="u | filterBy s in name" v-on="click: cu(this)" v-class="done: this == sel")
          | {{name}}
        div(v-show="sel")
          | {{sel.name}}
          br
          | {{sel.com}}
    
    //- vue フィルター
      #app
        div(v-text="t | lowercase")
        div(v-text="t | uppercase")
        div(v-text="c | currency")
        div(v-text="j | json")
        br
        span(v-repeat="l") {{ $index==0 ? "" : ","}}{{$value}}
        br
        span(v-repeat="l | orderBy -1 ") {{ $index==0 ? "" : ","}}{{$value}}
        br
        span(v-repeat="l | orderBy 1 ") {{ $index==0 ? "" : ","}}{{$value}}
        br
        span(v-repeat="l | filterBy 5") {{ $index==0 ? "" : ","}}{{$value}}
    
    
    
    //- vueサンプル2
      .app
        button(v-on="click: submit('hell', $event)") sub
        button(v-on="click: submit('mit')") sub
        div
          input(type="checkbox" v-model="checked")
          | {{checked ? "t" : "f"}}
        div
          input(type="radio" name="picked" value="bon" v-model="picked")
          input(type="radio" name="picked" value="dona" v-model="picked")
          | {{picked}}
        div
          select(v-model="selected")
            option sss
            option ooo
          | {{selected}}
        div
          select(v-model="sele" options="seleList")
          | {{sele}}
    
    
    
    //- vueサンプル
      #app
        input(type="text" v-model="message")
        input(type="text" v-text="m2")
        div(v-show="message != 'none'") {{message}}
        //- div {{m2}}
        div(v-text="m2") [v-cloak]
        // htmlエスケープされる通常の出力 v-textディレクティブと等価
        | {{text}}
        // htmlエスケープされない出力 v-htmlディレクティブと等価
        | {{{unescapedText}}}
        // 一度だけのバインディング
        | {{* onetimeText}}
        | {{* onetimeText}}
        input(type="text" v-model="text")
        input(type="text" v-model="onetimeText")
        style [v-cloak] { display:none }
        div(v-class="done: klass") nanigai
        // コンパイル後のみ正しくsrcをセットするためにはv-attrディレクティブ
        div(v-attr="value : 'd' + num") aaa {{num}}
    
    
    
    //- vueでtodoリスト
      #todo
        p
          input(type="text" value="" placeholder="TODOを入力" v-model="todoInputValue")
          button(v-on="click: addTodo")
            | 追加
        
        ul(v-repeat="todoList" v-with="i")
          li
            span {{$value}}
              | Todo
            |  - 
            button(v-on="click: removeTodo($index)" )
              | 削除
    
    
    //- vue5
      #app
        header-template
        div(v-repeat="user" v-component="item-template")
      
      script#headerTemplate(type="text/template")
        h3(v-on="click:hell") mytodo
    
    
    //- vue4
      #todo
        h1 myto
        div(v-repeat="t: todos | orderBy 'isDone'")
          input(type="checkbox" v-model="t.isDone")
          {{$index}}:{{t.title}}
        input(type="button" v-on="click: addTodo" value="add todo")
        div left {{lefts}} tasks.
    
    
    
    //- vue3
      #simple
        span(v-text="message" v-on="click: magnify" v-attr="style:font")
    
    
    //- vue2
      #demo
        h1 {{title | uppercase}}
        ul
          li(v-repeat="todos" v-on="click: done = !done" class="{{done ? 'done': ''}}") {{content}}
    
    //- vue1
      #demo
        p {{message}}
        input(v-model="message")
    
    
    
    //- coderwall
      link(href="http://coderwall.com/stylesheets/jquery.coderwall.css" media="all" rel="stylesheet" type="text/css")
      script(src="http://coderwall.com/javascripts/jquery.coderwall.js")
      section(class="coderwall" data-coderwall-username="trshugu" data-coderwall-orientation="vertical")
    
    
    //- ractive
      script(type="text/javascript", src="bower_components/ractive/ractive.min.js")
      #result
      
      script#myTemplate(type="text/ractive")
        {{user}}
        {{messages.unread}}
    
    
    //- bacon.js3
      script(type="text/javascript", src="bower_components/bacon/dist/Bacon.min.js")
      input#input(type="text")
      #results(style="position: absolute; z-index:1000;background-color: white; padding: 0.5em")
    
    
    //- bacon.js2
      script(type="text/javascript", src="bower_components/bacon/dist/Bacon.min.js")
      #up up
      #down down
      #counter
    
    //- bacon.js
      #clickable-block {
          width:10em;
          height:10em;
          background: #F1C40F;
          position:absolute;
      }
      #hukuse {
          width:10em;
          height:10em;
          background: #983;
          position:absolute;
      }
      div:hover { cursor: pointer; }
      #clickable-block
      #hukuse
    
    //- mocha
      script(type="text/javascript", src="bower_components/mocha/mocha.js")
      script(type="text/javascript", src="bower_components/chai/chai.js")
      link(href="bower_components/mocha/mocha.css", rel="stylesheet")
    
    //- jasmine
      script(type="text/javascript", src="bower_components/jasmine/dist/jasmine-standalone-2.0.3/lib/jasmine-2.0.3/jasmine.js")
      script(type="text/javascript", src="bower_components/jasmine/dist/jasmine-standalone-2.0.3/lib/jasmine-2.0.3/jasmine-html.js")
      script(type="text/javascript", src="bower_components/jasmine/dist/jasmine-standalone-2.0.3/lib/jasmine-2.0.3/boot.js")
      script(type="text/javascript", src="bower_components/jasmine/dist/jasmine-standalone-2.0.3/lib/jasmine-2.0.3/console.js")
      link(href="bower_components/jasmine/dist/jasmine-standalone-2.0.3/lib/jasmine-2.0.3/jasmine.css", rel="stylesheet")
      link(rel="shortcut icon" type="image/png" href="bower_components/jasmine/dist/jasmine-standalone-2.0.3/lib/jasmine-2.0.3/jasmine_favicon.png")
    
    
    //- qunit
      script(type="text/javascript", src="bower_components/qunit/qunit/qunit.js")
      link(href="bower_components/qunit/qunit/qunit.css", rel="stylesheet")
      h1#qunit-header QUnit Test Suite
      h2#qunit-banner
      #qunit-testrunner-toolbar
      h2#qunit-userAgent
      ol#qunit-tests
      #qunit-fixture test markup, will be hidden
    
    
    
    
    //- raphael
      script(type="text/javascript", src="bower_components/raphael/raphael-min.js")
    
    
    //- visualize
      script(type="text/javascript", src="visualize.jQuery.js")
      link(href="visualize.css", rel="stylesheet")
      link(href="visualize-dark.css", rel="stylesheet")
      table#tab
        caption 2009 Employee Sales by Department
          thead
            tr
              td
              th(scope='col') food
              th(scope='col') auto
              th(scope='col') household
              th(scope='col') furniture
              th(scope='col') kitchen
              th(scope='col') bath
          tbody
            tr
              th(scope='row') Mary
              td 190
              td 160
              td 40
              td 120
              td 30
              td 70
            tr
              th(scope='row') Tom
              td 3
              td 40
              td 30
              td 45
              td 35
              td 49
            tr
              th(scope='row') Brad
              td 10
              td 180
              td 10
              td 85
              td 25
              td 79
            tr
              th(scope='row') Kate
              td 40
              td 80
              td 90
              td 25
              td 15
              td 119

    
    //- morrisjs
      script(type="text/javascript", src="bower_components/raphael/raphael-min.js")
      script(type="text/javascript", src="bower_components/morrisjs/morris.min.js")
      #morri(style="height: 250px;")
    
    //- テーブルデータをグラフに
      script(type="text/javascript", src="chartify.min.js")
      table#pac
        thead
          tr
            th not
            th pac
        tbody
          tr
            td 1.256
            td 5.027
    
    //- アイコン風グラフ
      script(type="text/javascript", src="bower_components/peity/jquery.peity.min.js")
      .pie.cha 1/5
      .pie 226/230
      .pie 0.52/1.561
      .pie 1,4
      .pie 226,134
      .pie 1,3,4,2,2
      
      .line.update 1,4,3,3,4,5,4,4,6,8,3
      .line 1,4,-3,3,-4,5,4,-4,-6,8,3
    
    //- graphene ダメだった
      script(type="text/javascript", src="bower_components/graphene/graphene-standalone.min.js")
    
    //- sigma ダメだった
      script(type="text/java      #container {
          max-width: 400px;
          height: 400px;
          margin: auto;
        }
        
        sigma.parsers.json('data.json', {
          container: 'container',
          settings: {
            defaultNodeColor: '#ec5148'
          }
        });
      script", src="bower_components/sigma/build/sigma.min.js")
      script(type="text/javascript", src="bower_components/sigma/build/plugins/sigma.parsers.json.min.js")
      #container
      
    //- リアルタイムflotr2
      script(type="text/javascript", src="bower_components/flotr2/flotr2.min.js")
      #add(onclick="add()") add
      #graph
    
    //- flotr2
      body {
        margin: 0px;
        padding: 0px;
      }
      #graph {
        width : 600px;
        height: 400px;
        margin: 20px auto;
      }
      .graph-title {
        font-size:16px;
        font-weight:bold;
        text-align:center;
        margin:50px 0 0;
        }
      script(type="text/javascript", src="bower_components/flotr2/flotr2.min.js")
      #graph
    
    //- リアルタイム更新
      script(type="text/javascript", src="bower_components/d3/d3.min.js")
      script(type="text/javascript", src="bower_components/rickshaw/rickshaw.min.js")
      #tmp(onclick="add()") tmp
      #chart


    //- rickshaw
      script(type="text/javascript", src="bower_components/d3/d3.min.js")
      script(type="text/javascript", src="bower_components/rickshaw/rickshaw.min.js")
      #chart
    
    //- handwritten css
      link(href="http://fonts.googleapis.com/css?family=Oleo+Script" rel="stylesheet" type="text/css")
      h2 tmp
    

    //- knockout 解析
      input(type="text" value="" placeholder="入力" data-bind="value: inputValue")
      button(data-bind="click: add")
        | add

      div(data-bind="foreach: list, visible: list().length > 0")
        div
          span(data-bind="text: text")
            | Todo
          button(data-bind="click: $root.remove")
            | delete
    
    //- knockout でTodoリスト
      p
        input(type="text" value="" placeholder="TODOを入力" data-bind="value: todoInputValue")
        button(data-bind="click: addTodo")
          | 追加

      ul(data-bind="foreach: todoList, visible: todoList().length > 0")
        li
          span(data-bind="text: todoText")
            | Todo
          |  - 
          button(data-bind="click: $root.removeTodo")
            | 削除
    
    
    //- knockout タスクリストサンプル
      div(data-bind="foreach: tasks")
        div(class="task")
          div(data-bind="visible: !editing()")
            | 通常表示するビュー。
            input(type="checkbox" data-bind="checked: completed")
            span(data-bind="if: !completed()")
              span(data-bind="text: name")
            del(data-bind="if: completed()")
              span(data-bind="text: name")
            a(href="javascript:void(0);" data-bind="event: { click: toggleEdit }")
              | [edit]
          
          div(data-bind="visible: editing()")
            | 編集時に表示するビュー
            input(type="text" data-bind="value: name")
            input(type="button" data-bind="event: { click: toggleEdit }" value="編集終了")
            input(type="button" data-bind="event: { click: destroy }" value="削除")
      br
      | form の submit イベントと、appViewModel の addTask メソッドをバインドする
      form(data-bind="event: { submit: addTask }")
        | keyup が発生するたびに、appViewModel.newTaskName の値を更新する
        input(type="text" data-bind="value: newTaskName, valueUpdate: 'keyup'")
        br
        | appViewModel.newTaskName が空のときはボタンを無効にする
        input(type="submit" data-bind="enable: newTaskName().length > 0" value="登録")
      
      
    //- knockout data-bindの試し書き
      input(type="text" data-bind="value: message, valueUpdate: 'afterkeydown'")
      p(id="result" data-bind="text: message") ここに入力されたテキストと同じものが入る

    //- knockout wiki曰く
      p First name:
        input(data-bind="value: firstName, valueUpdate: 'afterkeydown'")
      p Last name: 
        input(data-bind="value: lastName, valueUpdate: 'afterkeydown'")
      h2 Hello, 
        span(data-bind="text: fullName") !
  
    
    //- knockout Modelのテスト用
      span(data-bind="text: value")
      input(id="btn" type="button" value="btn" data-bind="click: btn")

      input(id="btn" type="button" value="btn2" onclick="ddd()")
    
    
    //- 
      | // knockout ViewはViewModelを知っているべきでViewModelはViewを知らなくてもよい
      span(data-bind="text: pN1")
      br
      span(data-bind="text: pN2")
      br
      span(data-bind="text: pN3")
    
    
    //-
    
    
    
